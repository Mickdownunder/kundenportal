import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

const DIRECTUS_URL = process.env.DIRECTUS_URL;
const DIRECTUS_TOKEN = process.env.DIRECTUS_TOKEN;

const authOptions = {
  providers: [
    CredentialsProvider({
      name: "Zugangscode",
      credentials: {
        accessCode: { label: "Zugangscode", type: "text" },
      },
      async authorize(credentials) {
        if (!credentials?.accessCode) return null;

        // Fetch Project with accessCode from Directus
        const res = await fetch(`${DIRECTUS_URL}/items/Project?filter[accessCode][_eq]=${credentials.accessCode}`, {
          headers: { Authorization: `Bearer ${DIRECTUS_TOKEN}` },
        });
        if (!res.ok) return null;

        const { data: projects } = await res.json();
        if (!projects.length) return null;

        const project = projects[0];

        // Fetch User from Directus
        const userRes = await fetch(`${DIRECTUS_URL}/items/User/${project.userId}`, {
          headers: { Authorization: `Bearer ${DIRECTUS_TOKEN}` },
        });
        if (!userRes.ok) return null;

        const { data: user } = await userRes.json();

        return { id: user.id, name: user.name, email: user.email, role: user.role, projectId: project.id };
      },
    }),
  ],
  pages: {
    signIn: '/login',
  },
  session: {
    strategy: 'jwt',
  },
  callbacks: {
    async jwt({ token, user }) {
      if (user) {
        token.role = user.role;
        token.projectId = user.projectId;
      }
      return token;
    },
    async session({ session, token }) {
      session.user.role = token.role;
      session.user.projectId = token.projectId;
      return session;
    },
  },
};

export { authOptions };
